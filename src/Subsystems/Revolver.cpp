// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.




#include "Revolver.h"
#include "../Robotmap.h"

Revolver::Revolver() : Subsystem("Revolver") {
	printf("Entering Revolver Constructor\n");
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	revolver = RobotMap::revolverRevolver;
	alignmentSwitch = RobotMap::revolverAlignmentSwitch;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	//RetrieveConfig();
	count = 0;
	Motor_Reversed = false;
	printf("Exiting Revolver Constructor\n");
}
    
void Revolver::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
/*
void Revolver::RetrieveConfig()
{
	Motor_Enabled  = Preferences::GetInstance()->GetBoolean("Revolver::Motor::Enabled",true);
	Motor_CANID    = Preferences::GetInstance()->GetInt("Revolver::Motor::CANID",2);
	Motor_Reversed = Preferences::GetInstance()->GetBoolean("Revolver::Motor::Reversed",false);
}


void Revolver::StoreConfig()
{
	Preferences::GetInstance()->PutBoolean("Revolver::Motor::Enabled",Motor_Enabled);
	Preferences::GetInstance()->PutInt("Revolver::Motor::CANID",Motor_CANID);
	Preferences::GetInstance()->PutBoolean("Revolver::Motor::Reversed",Motor_Reversed);
}

void Revolver::Configure()
{
	// do nothing
}
*/
void Revolver::Enable()
{
	revolver->EnableControl();
}

void Revolver::RotateClockwise()
{
	//revolver->ChangeControlMode(CANJaguar::kPercentVbus);
    if (Motor_Reversed)
    {
	    revolver->Set(-0.75);
    } else
    {
 	    revolver->Set(0.75);
    }
    //revolver->EnableControl();
}

void Revolver::RotateCounterClockwise()
{
	//revolver->ChangeControlMode(CANJaguar::kPercentVbus);
	if (Motor_Reversed)
	{
	   revolver->Set(0.75);
    } else
	{
	   revolver->Set(-0.75);
	}
	//revolver->EnableControl();
}

void Revolver::Stop()
{
	revolver->Set(0.0);
	revolver->Disable();
	ResetCounter();
}

void Revolver::ResetCounter()
{
	count = 0;
}

void Revolver::SetAlignment(bool clockw)
{
	while (alignmentSwitch->Get() == 0)
	{
		if (clockw)
		{
			Revolver::RotateClockwise();
		} else
		{
			Revolver::RotateCounterClockwise();
		}
	}

	if (clockw)
	{
		Revolver::RotateClockwise();
	} else
	{
		Revolver::RotateCounterClockwise();
	}
	Wait(0.02);
	revolver->Set(0.0);
}

bool Revolver::IsAligned()
{
	int i = alignmentSwitch->Get();
	if (i == 0)
	{
		count++;
	}
	if (count > 0)
	{
		//Wait(0.001);
		return true;
	}
	return false;

}

