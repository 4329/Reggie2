// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.




#include "DriveTrain.h"
#include "../Robotmap.h"
#include "Commands/TeleopDrive.h"

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	printf("Entering DriveTrain Constructor\n");
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftMotor1 = RobotMap::driveTrainLeftMotor1;
	rightMotor1 = RobotMap::driveTrainRightMotor1;
	leftMotor2 = RobotMap::driveTrainLeftMotor2;
	rightMotor2 = RobotMap::driveTrainRightMotor2;
	driveA = RobotMap::driveTrainDriveA;
	leftMotor3 = RobotMap::driveTrainLeftMotor3;
	rightMotor3 = RobotMap::driveTrainRightMotor3;
	driveB = RobotMap::driveTrainDriveB;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	HighSpeedRate = 1.0;
	LowSpeedRate = 0.75;

	printf("Exiting DriveTrain Constructor\n");
	//RetrieveConfig();
}
    
void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new TeleopDrive());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

/*
void DriveTrain::RetrieveConfig()
{
	HighSpeedRate = Preferences::GetInstance()->GetFloat("DriveTrain::HighSpeed",1.0);
	LowSpeedRate = Preferences::GetInstance()->GetFloat("DriveTrain::LowSpeed",0.75);

	LeftMotor1_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftMotor1::Enabled",true);
	LeftMotor1_CANID = Preferences::GetInstance()->GetInt("DriveTrain::LeftMotor1::CANID",4);
	LeftMotor1_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftMotor1::Reversed",true);

	LeftMotor2_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftMotor2::Enabled",true);
	LeftMotor2_CANID = Preferences::GetInstance()->GetInt("DriveTrain::LeftMotor2::CANID",6);
	LeftMotor2_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftMotor2::Reversed",true);

	LeftMotor3_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftMotor3::Enabled",true);
	LeftMotor3_CANID = Preferences::GetInstance()->GetInt("DriveTrain::LeftMotor3::CANID",8);
	LeftMotor3_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::LeftMotor3::Reversed",true);

	RightMotor1_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::RightMotor1::Enabled",true);
	RightMotor1_CANID = Preferences::GetInstance()->GetInt("DriveTrain::RightMotor1::CANID",3);
	RightMotor1_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::RightMotor1::Reversed",true);

	RightMotor2_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::RightMotor2::Enabled",true);
	RightMotor2_CANID = Preferences::GetInstance()->GetInt("DriveTrain::RightMotor2::CANID",5);
	RightMotor2_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::RightMotor2::Reversed",true);

	RightMotor3_Enabled = Preferences::GetInstance()->GetBoolean("DriveTrain::RightMotor3::Enabled",true);
	RightMotor3_CANID = Preferences::GetInstance()->GetInt("DriveTrain::RightMotor3::CANID",7);
	RightMotor3_Reversed = Preferences::GetInstance()->GetBoolean("DriveTrain::RightMotor3::Reversed",true);

}

void DriveTrain::StoreConfig()
{
	Preferences::GetInstance()->PutFloat("DriveTrain::HighSpeed",HighSpeedRate);
	Preferences::GetInstance()->PutFloat("DriveTrain::LowSpeed::LowSpeed",LowSpeedRate);

	Preferences::GetInstance()->PutBoolean("DriveTrain::LeftMotor1::Enabled",LeftMotor1_Enabled);
	Preferences::GetInstance()->PutInt("DriveTrain::LeftMotor1::CANID",LeftMotor1_CANID);
	Preferences::GetInstance()->PutBoolean("DriveTrain::LeftMotor1::Reversed",LeftMotor1_Reversed);

	Preferences::GetInstance()->PutBoolean("DriveTrain::LeftMotor2::Enabled",LeftMotor2_Enabled);
	Preferences::GetInstance()->PutInt("DriveTrain::LeftMotor2::CANID",LeftMotor2_CANID);
	Preferences::GetInstance()->PutBoolean("DriveTrain::LeftMotor2::Reversed",LeftMotor2_Reversed);

	Preferences::GetInstance()->PutBoolean("DriveTrain::LeftMotor3::Enabled",LeftMotor3_Enabled);
	Preferences::GetInstance()->PutInt("DriveTrain::LeftMotor3::CANID",LeftMotor3_CANID);
	Preferences::GetInstance()->PutBoolean("DriveTrain::LeftMotor3::Reversed",LeftMotor3_Reversed);

	Preferences::GetInstance()->PutBoolean("DriveTrain::RightMotor1::Enabled",RightMotor1_Enabled);
	Preferences::GetInstance()->PutInt("DriveTrain::RightMotor1::CANID",RightMotor1_CANID);
	Preferences::GetInstance()->PutBoolean("DriveTrain::RightMotor1::Reversed",RightMotor1_Reversed);

	Preferences::GetInstance()->PutBoolean("DriveTrain::RightMotor2::Enabled",RightMotor2_Enabled);
	Preferences::GetInstance()->PutInt("DriveTrain::RightMotor2::CANID",RightMotor2_CANID);
	Preferences::GetInstance()->PutBoolean("DriveTrain::RightMotor2::Reversed",RightMotor2_Reversed);

	Preferences::GetInstance()->PutBoolean("DriveTrain::RightMotor3::Enabled",RightMotor3_Enabled);
	Preferences::GetInstance()->PutInt("DriveTrain::RightMotor3::CANID",RightMotor3_CANID);
	Preferences::GetInstance()->PutBoolean("DriveTrain::RightMotor3::Reversed",RightMotor3_Reversed);
}

void DriveTrain::Configure()
{
	// do nothing
}
*/

// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::SetDrive_Arcade(float x, float y, bool highRate)
{
	float tx, ty;

	tx = Limit(x);
	ty = Limit(y);

    //printf("FD X %f   Y %f\n",tx,ty);

	if (leftMotor1->GetControlMode() != CANJaguar::kPercentVbus)
	{
		Set_VoltageMode();
	}

	if (ty > 0.0)
	{

		if (tx > 0.0)
		{
			leftMotorOutput = ty - tx;
			rightMotorOutput = std::max(ty, tx);
		}
		else if (tx < 0.0)
		{
			leftMotorOutput = std::max(ty, -tx);
			rightMotorOutput = ty + tx;
		} else
		{
			leftMotorOutput = ty;
			rightMotorOutput = ty;
		}
	}
	else
	{
		if (tx > 0.0)
		{
			leftMotorOutput = - std::max(-ty, tx);
			rightMotorOutput = ty + tx;
		}
		else if (tx < 0.0)
		{
			leftMotorOutput = ty - tx;
			rightMotorOutput = - std::max(-ty, -tx);
		} else
		{
			leftMotorOutput = ty;
			rightMotorOutput = ty;
		}
	}

	if (highRate)
	{
		leftMotor1->Set(leftMotorOutput*HighSpeedRate);
		rightMotor1->Set(rightMotorOutput*HighSpeedRate);
		leftMotor2->Set(leftMotorOutput*HighSpeedRate);
		rightMotor2->Set(rightMotorOutput*HighSpeedRate);
		leftMotor3->Set(leftMotorOutput*HighSpeedRate);
		rightMotor3->Set(rightMotorOutput*HighSpeedRate);
	} else
	{
		leftMotor1->Set(leftMotorOutput*LowSpeedRate);
		rightMotor1->Set(rightMotorOutput*LowSpeedRate);
		leftMotor2->Set(leftMotorOutput*LowSpeedRate);
		rightMotor2->Set(rightMotorOutput*LowSpeedRate);
		leftMotor3->Set(leftMotorOutput*LowSpeedRate);
		rightMotor3->Set(rightMotorOutput*LowSpeedRate);
	}
}


void DriveTrain::Set_VoltageMode()
{
	printf("Setting VoltageMode\n");
	leftMotor1->ChangeControlMode(CANJaguar::kPercentVbus);
	rightMotor1->ChangeControlMode(CANJaguar::kPercentVbus);
	leftMotor2->ChangeControlMode(CANJaguar::kPercentVbus);
	rightMotor2->ChangeControlMode(CANJaguar::kPercentVbus);
	leftMotor3->ChangeControlMode(CANJaguar::kPercentVbus);
	rightMotor3->ChangeControlMode(CANJaguar::kPercentVbus);

	leftMotor1->EnableControl();
	rightMotor1->EnableControl();
	leftMotor2->EnableControl();
	rightMotor2->EnableControl();
	leftMotor3->EnableControl();
	rightMotor3->EnableControl();

	leftMotor1->Set(0);
	rightMotor1->Set(0);
	leftMotor2->Set(0);
	rightMotor2->Set(0);
	leftMotor3->Set(0);
	rightMotor3->Set(0);

}

void DriveTrain::Stop()
{
	leftMotor1->Set(0);
	rightMotor1->Set(0);
	leftMotor2->Set(0);
	rightMotor2->Set(0);
	leftMotor3->Set(0);
	rightMotor3->Set(0);

	leftMotor1->Disable();
	rightMotor1->Disable();
	leftMotor2->Disable();
	rightMotor2->Disable();
	leftMotor3->Disable();
	rightMotor3->Disable();
}

/**
 * Limit motor values to the -1.0 to +1.0 range.
 */
float DriveTrain::Limit(float num)
{
	if (num > 1.0)
	{
		return 1.0;
	}
	if (num < -1.0)
	{
		return -1.0;
	}
	return num;
}
