// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.




#include "Lifter.h"
#include "../Robotmap.h"
#include "Commands/TeleopLift.h"

Lifter::Lifter() : Subsystem("Lifter") {
	printf("Entering Lifter Constructor\n");
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	solenoid = RobotMap::lifterSolenoid;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	forwardIsUp = true;
	//RetrieveConfig();
	printf("Exiting Lifter Constructor\n");
}
    
void Lifter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new TeleopLift());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

/*
void Lifter::RetrieveConfig()
{
	forwardIsUp = Preferences::GetInstance()->GetBoolean("Lifter::ForwardIsUp",true);
}

void Lifter::StoreConfig()
{
	Preferences::GetInstance()->PutBoolean("Lifter::ForwardIsUp",forwardIsUp);
}

void Lifter::Configure()
{
	// Do Nothing.
}
*/
void Lifter::LiftUp()
{
	if (forwardIsUp)
	{
		solenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		solenoid->Set(DoubleSolenoid::kReverse);
	}
}

void Lifter::LiftDown()
{
	if (forwardIsUp)
	{
		solenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		solenoid->Set(DoubleSolenoid::kForward);
	}
}

float Lifter::Limit(float num)
{
	if (num > 1.0)
	{
		return 1.0;
	}
	if (num < -1.0)
	{
		return -1.0;
	}
	return num;
}
